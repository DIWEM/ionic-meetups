(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('quagga'), require('@angular/common'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-barcode-scanner', ['exports', 'quagga', '@angular/common', '@angular/core'], factory) :
    (factory((global['ngx-barcode-scanner'] = {}),global.Quagga,global.ng.common,global.ng.core));
}(this, (function (exports,Quagga,common,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @param {?} value
     * @return {?}
     */
    function mapToReader(value) {
        return [value + "_reader"];
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_CONFIG = {
        inputStream: {
            name: 'Live',
            type: 'LiveStream',
            target: null,
            constraints: {
                width: { min: 640 },
                height: { min: 480 },
                aspectRatio: { min: 1, max: 100 },
                facingMode: 'environment',
            },
            singleChannel: false // true: only the red color-channel is read
        },
        locator: {
            patchSize: 'medium',
            halfSample: true
        },
        locate: true,
        numOfWorkers: 4,
        decoder: {
            readers: ['code_128_reader']
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BarecodeScannerLivestreamComponent = /** @class */ (function () {
        function BarecodeScannerLivestreamComponent() {
            // Outputs
            this.valueChanges = new core.EventEmitter();
            this.started = false;
            this.configQuagga = DEFAULT_CONFIG;
        }
        /**
         * @return {?}
         */
        BarecodeScannerLivestreamComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.stop();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        BarecodeScannerLivestreamComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.retart();
            };
        /**
         * @return {?}
         */
        BarecodeScannerLivestreamComponent.prototype._init = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    Quagga.onProcessed(function (result) { return _this.onProcessed(result); });
                    Quagga.onDetected(function (result) { return _this.onDetected(result); });
                    _this.configQuagga.inputStream.target = _this.barecodeScanner.nativeElement;
                    if (_this.type) {
                        _this.configQuagga.decoder.readers = mapToReader(_this.type);
                    }
                    Quagga.init(_this.configQuagga, function (err) {
                        if (err) {
                            console.log(err);
                            return reject(err);
                        }
                        resolve();
                    });
                });
            };
        /**
         * @return {?}
         */
        BarecodeScannerLivestreamComponent.prototype.start = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.started) {
                    return this._init().then(function () {
                        Quagga.start();
                        _this.started = true;
                        console.log('started');
                    });
                }
                return Promise.resolve();
            };
        /**
         * @return {?}
         */
        BarecodeScannerLivestreamComponent.prototype.stop = /**
         * @return {?}
         */
            function () {
                if (this.started) {
                    Quagga.stop();
                    this.started = false;
                    console.log('stopped');
                }
            };
        /**
         * @return {?}
         */
        BarecodeScannerLivestreamComponent.prototype.retart = /**
         * @return {?}
         */
            function () {
                if (this.started) {
                    this.stop();
                    this.start();
                }
            };
        /**
         * @return {?}
         */
        BarecodeScannerLivestreamComponent.prototype.isStarted = /**
         * @return {?}
         */
            function () {
                return this.started;
            };
        /**
         * @param {?} result
         * @return {?}
         */
        BarecodeScannerLivestreamComponent.prototype.onProcessed = /**
         * @param {?} result
         * @return {?}
         */
            function (result) {
                /** @type {?} */
                var drawingCtx = Quagga.canvas.ctx.overlay;
                /** @type {?} */
                var drawingCanvas = Quagga.canvas.dom.overlay;
                if (result) {
                    if (result.boxes) {
                        drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute('width')), parseInt(drawingCanvas.getAttribute('height')));
                        result.boxes.filter(function (box) {
                            return box !== result.box;
                        }).forEach(function (box) {
                            Quagga.ImageDebug.drawPath(box, {
                                x: 0,
                                y: 1,
                            }, drawingCtx, {
                                color: 'green',
                                lineWidth: 2,
                            });
                        });
                    }
                    if (result.box) {
                        Quagga.ImageDebug.drawPath(result.box, {
                            x: 0,
                            y: 1,
                        }, drawingCtx, {
                            color: '#00F',
                            lineWidth: 2,
                        });
                    }
                    if (result.codeResult && result.codeResult.code) {
                        Quagga.ImageDebug.drawPath(result.line, {
                            x: 'x',
                            y: 'y',
                        }, drawingCtx, {
                            color: 'red',
                            lineWidth: 3,
                        });
                    }
                }
            };
        /**
         * @param {?} result
         * @return {?}
         */
        BarecodeScannerLivestreamComponent.prototype.onDetected = /**
         * @param {?} result
         * @return {?}
         */
            function (result) {
                this.valueChanges.next(result);
            };
        BarecodeScannerLivestreamComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'barcode-scanner-livestream',
                        template: "<div #BarecodeScanner class=\"scanner\" [hidden]=\"!isStarted()\">\n</div>",
                        encapsulation: core.ViewEncapsulation.None,
                        styles: [".scanner{position:relative}.scanner canvas,.scanner video{max-width:100%;width:100%}.scanner canvas.drawingBuffer{position:absolute;left:0;top:0}"]
                    }] }
        ];
        BarecodeScannerLivestreamComponent.propDecorators = {
            type: [{ type: core.Input }],
            valueChanges: [{ type: core.Output }],
            barecodeScanner: [{ type: core.ViewChild, args: ['BarecodeScanner',] }]
        };
        return BarecodeScannerLivestreamComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BarecodeScannerLivestreamModule = /** @class */ (function () {
        function BarecodeScannerLivestreamModule() {
        }
        BarecodeScannerLivestreamModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            BarecodeScannerLivestreamComponent
                        ],
                        exports: [
                            BarecodeScannerLivestreamComponent
                        ]
                    },] }
        ];
        return BarecodeScannerLivestreamModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BarecodeScannerLivestreamOverlayComponent = /** @class */ (function () {
        function BarecodeScannerLivestreamOverlayComponent() {
            this.valueChanges = new core.EventEmitter();
            this._showScanner = false;
        }
        Object.defineProperty(BarecodeScannerLivestreamOverlayComponent.prototype, "showScanner", {
            get: /**
             * @return {?}
             */ function () {
                return this._showScanner;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        BarecodeScannerLivestreamOverlayComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.scanner.stop();
            };
        /**
         * @return {?}
         */
        BarecodeScannerLivestreamOverlayComponent.prototype.show = /**
         * @return {?}
         */
            function () {
                this._showScanner = true;
                this.scanner.start();
            };
        /**
         * @return {?}
         */
        BarecodeScannerLivestreamOverlayComponent.prototype.hide = /**
         * @return {?}
         */
            function () {
                this._showScanner = false;
                this.scanner.stop();
            };
        /**
         * @param {?} result
         * @return {?}
         */
        BarecodeScannerLivestreamOverlayComponent.prototype.onValueChanges = /**
         * @param {?} result
         * @return {?}
         */
            function (result) {
                this.valueChanges.next(result);
            };
        BarecodeScannerLivestreamOverlayComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'barcode-scanner-livestream-overlay',
                        template: "<div class=\"barcode-scanner-livestream-overlay\" [hidden]=\"!showScanner\">\n    <div class=\"barcode-scanner-livestream-overlay-content\">\n        <div class=\"barcode-scanner-livestream-overlay-close\" (click)=\"hide()\">X</div>\n        <barcode-scanner-livestream [type]=\"type\" (valueChanges)=\"onValueChanges($event)\"></barcode-scanner-livestream>\n    </div>\n</div>",
                        styles: [".barcode-scanner-livestream-overlay{overflow:hidden;position:fixed;top:0;bottom:0;left:0;right:0;width:100%;background-color:rgba(0,0,0,.3);z-index:1000}.barcode-scanner-livestream-overlay .barcode-scanner-livestream-overlay-content{top:50%;position:absolute;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);width:90%;max-height:90%;max-width:800px}.barcode-scanner-livestream-overlay .barcode-scanner-livestream-overlay-content .barcode-scanner-livestream-overlay-close{position:absolute;right:0;padding:.5rem;width:2rem;height:2rem;line-height:2rem;text-align:center;background-color:#fff;cursor:pointer;border:3px solid #000;font-size:1.5rem;margin:-1rem;border-radius:2rem;z-index:100;box-sizing:content-box}"]
                    }] }
        ];
        BarecodeScannerLivestreamOverlayComponent.propDecorators = {
            type: [{ type: core.Input }],
            valueChanges: [{ type: core.Output }],
            scanner: [{ type: core.ViewChild, args: [BarecodeScannerLivestreamComponent,] }]
        };
        return BarecodeScannerLivestreamOverlayComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BarecodeScannerLivestreamOverlayModule = /** @class */ (function () {
        function BarecodeScannerLivestreamOverlayModule() {
        }
        BarecodeScannerLivestreamOverlayModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            BarecodeScannerLivestreamModule
                        ],
                        declarations: [
                            BarecodeScannerLivestreamOverlayComponent
                        ],
                        exports: [
                            BarecodeScannerLivestreamOverlayComponent
                        ]
                    },] }
        ];
        return BarecodeScannerLivestreamOverlayModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.BarecodeScannerLivestreamModule = BarecodeScannerLivestreamModule;
    exports.BarecodeScannerLivestreamComponent = BarecodeScannerLivestreamComponent;
    exports.BarecodeScannerLivestreamOverlayModule = BarecodeScannerLivestreamOverlayModule;
    exports.BarecodeScannerLivestreamOverlayComponent = BarecodeScannerLivestreamOverlayComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-barcode-scanner.umd.js.map