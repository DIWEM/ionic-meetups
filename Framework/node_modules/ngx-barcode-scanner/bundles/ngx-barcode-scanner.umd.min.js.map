{"version":3,"sources":["ng://ngx-barcode-scanner/lib/barcode-scanner-livestream/barcode-scanner-livestream.config.ts","ng://ngx-barcode-scanner/lib/barcode-scanner-livestream/barcode-scanner-livestream.component.ts","ng://ngx-barcode-scanner/lib/barcode-scanner-livestream/barcode-types.ts","ng://ngx-barcode-scanner/lib/barcode-scanner-livestream/barcode-scanner-livestream.module.ts","ng://ngx-barcode-scanner/lib/barcode-scanner-livestream-overlay/barcode-scanner-livestream-overlay.component.ts","ng://ngx-barcode-scanner/lib/barcode-scanner-livestream-overlay/barcode-scanner-livestream-overlay.module.ts"],"names":["DEFAULT_CONFIG","inputStream","name","type","target","constraints","width","min","height","aspectRatio","max","facingMode","singleChannel","locator","patchSize","halfSample","locate","numOfWorkers","decoder","readers","BarecodeScannerLivestreamComponent","this","valueChanges","EventEmitter","prototype","ngOnDestroy","stop","ngOnChanges","changes","retart","_init","Promise","resolve","reject","Quagga.onProcessed","result","_this","onProcessed","Quagga.onDetected","onDetected","configQuagga","barecodeScanner","nativeElement","mapToReader","value","Quagga.init","err","console","log","start","started","then","Quagga.start","Quagga.stop","isStarted","drawingCtx","Quagga.canvas","ctx","overlay","drawingCanvas","dom","boxes","clearRect","parseInt","getAttribute","filter","box","forEach","Quagga.ImageDebug","drawPath","x","y","color","lineWidth","codeResult","code","line","next","Component","args","selector","template","encapsulation","ViewEncapsulation","None","Input","Output","ViewChild","BarecodeScannerLivestreamModule","NgModule","imports","CommonModule","declarations","exports","BarecodeScannerLivestreamOverlayComponent","Object","defineProperty","_showScanner","scanner","show","hide","onValueChanges","BarecodeScannerLivestreamOverlayModule"],"mappings":"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","sourcesContent":["export const DEFAULT_CONFIG = {\n    inputStream: {\n        name: 'Live',\n        type: 'LiveStream',\n        target: null,\n        constraints: {\n            width: { min: 640 },\n            height: { min: 480 },\n            aspectRatio: { min: 1, max: 100 },\n            facingMode: 'environment', // or user\n        },\n        singleChannel: false // true: only the red color-channel is read\n    },\n    locator: {\n        patchSize: 'medium',\n        halfSample: true\n    },\n    locate: true,\n    numOfWorkers: 4,\n    decoder: {\n        readers: ['code_128_reader']\n    }\n};","import {\n    Component, Input, Output, EventEmitter, ViewChild, OnDestroy, ViewEncapsulation, OnChanges, SimpleChanges\n} from '@angular/core';\nimport * as Quagga from 'quagga';\nimport { mapToReader } from './barcode-types';\nimport { DEFAULT_CONFIG } from './barcode-scanner-livestream.config';\n\n@Component({\n    selector: 'barcode-scanner-livestream',\n    templateUrl: './barcode-scanner-livestream.component.html',\n    styleUrls: ['./barcode-scanner-livestream.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class BarecodeScannerLivestreamComponent implements OnChanges, OnDestroy {\n    // Inputs\n    @Input() type: string;\n\n    // Outputs\n    @Output() valueChanges = new EventEmitter();\n\n    @ViewChild('BarecodeScanner') barecodeScanner;\n\n    private started = false;\n\n    private configQuagga = DEFAULT_CONFIG;\n\n    ngOnDestroy(): void {\n        this.stop();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.retart();\n    }\n\n    private _init() {\n        return new Promise((resolve, reject) => {\n            Quagga.onProcessed((result) => this.onProcessed(result));\n\n            Quagga.onDetected((result) => this.onDetected(result));\n\n            this.configQuagga.inputStream.target = this.barecodeScanner.nativeElement;\n\n            if (this.type) {\n                this.configQuagga.decoder.readers = mapToReader(this.type);\n            }\n\n            Quagga.init(this.configQuagga, (err) => {\n                if (err) {\n                    console.log(err);\n                    return reject(err);\n                }\n\n                resolve();\n            });\n        });\n    }\n\n    start() {\n        if (!this.started) {\n            return this._init().then(() => {\n                Quagga.start();\n                this.started = true;\n                console.log('started')\n            })\n        }\n\n        return Promise.resolve();\n    }\n\n    stop() {\n        if (this.started) {\n            Quagga.stop();\n            this.started = false;\n            console.log('stopped')\n        }\n    }\n\n    retart() {\n        if (this.started) {\n            this.stop();\n            this.start();\n        }\n    }\n\n    isStarted() {\n        return this.started;\n    }\n\n    onProcessed(result: any): any {\n        let drawingCtx = Quagga.canvas.ctx.overlay,\n            drawingCanvas = Quagga.canvas.dom.overlay;\n\n        if (result) {\n            if (result.boxes) {\n                drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute('width')), parseInt(drawingCanvas.getAttribute('height')));\n                result.boxes.filter(function (box) {\n                    return box !== result.box;\n                }).forEach(function (box) {\n                    Quagga.ImageDebug.drawPath(box, {\n                        x: 0,\n                        y: 1,\n                    }, drawingCtx, {\n                            color: 'green',\n                            lineWidth: 2,\n                        });\n                });\n            }\n\n            if (result.box) {\n                Quagga.ImageDebug.drawPath(result.box, {\n                    x: 0,\n                    y: 1,\n                }, drawingCtx, {\n                        color: '#00F',\n                        lineWidth: 2,\n                    });\n            }\n\n            if (result.codeResult && result.codeResult.code) {\n                Quagga.ImageDebug.drawPath(result.line, {\n                    x: 'x',\n                    y: 'y',\n                }, drawingCtx, {\n                        color: 'red',\n                        lineWidth: 3,\n                    });\n            }\n\n        }\n    }\n\n    onDetected(result) {\n        this.valueChanges.next(result);\n    }\n\n}\n\n","export const BARCODE_TYPES = [\n    'code_128',\n    'code_39',\n    'code_39_vin',\n    'ean',\n    'ean_extended',\n    'ean_8',\n    'upc',\n    'upc_e',\n    'codabar',\n    'i2of5',\n    '2of5',\n    'code_93'\n]\n\nexport function mapToReader(value) {\n    return [ value + \"_reader\" ];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { BarecodeScannerLivestreamComponent } from './barcode-scanner-livestream.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        BarecodeScannerLivestreamComponent\n    ],\n    exports: [\n        BarecodeScannerLivestreamComponent\n    ]\n})\nexport class BarecodeScannerLivestreamModule { }\n","import {\n    Component, Input, Output, EventEmitter, ViewChild, OnDestroy\n} from '@angular/core';\nimport { BarecodeScannerLivestreamComponent } from '../barcode-scanner-livestream/barcode-scanner-livestream.component';\n\n@Component({\n    selector: 'barcode-scanner-livestream-overlay',\n    templateUrl: './barcode-scanner-livestream-overlay.component.html',\n    styleUrls: ['./barcode-scanner-livestream-overlay.component.scss'],\n})\nexport class BarecodeScannerLivestreamOverlayComponent implements OnDestroy{\n    // Inputs\n    @Input() type: string;\n\n    @Output() valueChanges = new EventEmitter();\n\n    @ViewChild(BarecodeScannerLivestreamComponent)\n    scanner: BarecodeScannerLivestreamComponent;\n\n    private _showScanner = false;\n\n    get showScanner(){\n        return this._showScanner;\n    }\n    \n    ngOnDestroy(){\n        this.scanner.stop();\n    }\n\n    show() {\n        this._showScanner = true;\n        this.scanner.start();\n    }\n\n    hide() {\n        this._showScanner = false;\n        this.scanner.stop();\n    }\n\n\n\n    onValueChanges(result){\n        this.valueChanges.next(result);\n    }\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BarecodeScannerLivestreamOverlayComponent } from './barcode-scanner-livestream-overlay.component';\nimport { BarecodeScannerLivestreamModule } from '../barcode-scanner-livestream/barcode-scanner-livestream.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        BarecodeScannerLivestreamModule\n    ],\n    declarations: [\n        BarecodeScannerLivestreamOverlayComponent\n    ],\n    exports: [\n        BarecodeScannerLivestreamOverlayComponent\n    ]\n})\nexport class BarecodeScannerLivestreamOverlayModule { }\n\n"]}