/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild, ViewEncapsulation } from '@angular/core';
import * as Quagga from 'quagga';
import { mapToReader } from './barcode-types';
import { DEFAULT_CONFIG } from './barcode-scanner-livestream.config';
var BarecodeScannerLivestreamComponent = /** @class */ (function () {
    function BarecodeScannerLivestreamComponent() {
        // Outputs
        this.valueChanges = new EventEmitter();
        this.started = false;
        this.configQuagga = DEFAULT_CONFIG;
    }
    /**
     * @return {?}
     */
    BarecodeScannerLivestreamComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.stop();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    BarecodeScannerLivestreamComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.retart();
    };
    /**
     * @return {?}
     */
    BarecodeScannerLivestreamComponent.prototype._init = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            Quagga.onProcessed(function (result) { return _this.onProcessed(result); });
            Quagga.onDetected(function (result) { return _this.onDetected(result); });
            _this.configQuagga.inputStream.target = _this.barecodeScanner.nativeElement;
            if (_this.type) {
                _this.configQuagga.decoder.readers = mapToReader(_this.type);
            }
            Quagga.init(_this.configQuagga, function (err) {
                if (err) {
                    console.log(err);
                    return reject(err);
                }
                resolve();
            });
        });
    };
    /**
     * @return {?}
     */
    BarecodeScannerLivestreamComponent.prototype.start = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.started) {
            return this._init().then(function () {
                Quagga.start();
                _this.started = true;
                console.log('started');
            });
        }
        return Promise.resolve();
    };
    /**
     * @return {?}
     */
    BarecodeScannerLivestreamComponent.prototype.stop = /**
     * @return {?}
     */
    function () {
        if (this.started) {
            Quagga.stop();
            this.started = false;
            console.log('stopped');
        }
    };
    /**
     * @return {?}
     */
    BarecodeScannerLivestreamComponent.prototype.retart = /**
     * @return {?}
     */
    function () {
        if (this.started) {
            this.stop();
            this.start();
        }
    };
    /**
     * @return {?}
     */
    BarecodeScannerLivestreamComponent.prototype.isStarted = /**
     * @return {?}
     */
    function () {
        return this.started;
    };
    /**
     * @param {?} result
     * @return {?}
     */
    BarecodeScannerLivestreamComponent.prototype.onProcessed = /**
     * @param {?} result
     * @return {?}
     */
    function (result) {
        /** @type {?} */
        var drawingCtx = Quagga.canvas.ctx.overlay;
        /** @type {?} */
        var drawingCanvas = Quagga.canvas.dom.overlay;
        if (result) {
            if (result.boxes) {
                drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute('width')), parseInt(drawingCanvas.getAttribute('height')));
                result.boxes.filter(function (box) {
                    return box !== result.box;
                }).forEach(function (box) {
                    Quagga.ImageDebug.drawPath(box, {
                        x: 0,
                        y: 1,
                    }, drawingCtx, {
                        color: 'green',
                        lineWidth: 2,
                    });
                });
            }
            if (result.box) {
                Quagga.ImageDebug.drawPath(result.box, {
                    x: 0,
                    y: 1,
                }, drawingCtx, {
                    color: '#00F',
                    lineWidth: 2,
                });
            }
            if (result.codeResult && result.codeResult.code) {
                Quagga.ImageDebug.drawPath(result.line, {
                    x: 'x',
                    y: 'y',
                }, drawingCtx, {
                    color: 'red',
                    lineWidth: 3,
                });
            }
        }
    };
    /**
     * @param {?} result
     * @return {?}
     */
    BarecodeScannerLivestreamComponent.prototype.onDetected = /**
     * @param {?} result
     * @return {?}
     */
    function (result) {
        this.valueChanges.next(result);
    };
    BarecodeScannerLivestreamComponent.decorators = [
        { type: Component, args: [{
                    selector: 'barcode-scanner-livestream',
                    template: "<div #BarecodeScanner class=\"scanner\" [hidden]=\"!isStarted()\">\n</div>",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".scanner{position:relative}.scanner canvas,.scanner video{max-width:100%;width:100%}.scanner canvas.drawingBuffer{position:absolute;left:0;top:0}"]
                }] }
    ];
    BarecodeScannerLivestreamComponent.propDecorators = {
        type: [{ type: Input }],
        valueChanges: [{ type: Output }],
        barecodeScanner: [{ type: ViewChild, args: ['BarecodeScanner',] }]
    };
    return BarecodeScannerLivestreamComponent;
}());
export { BarecodeScannerLivestreamComponent };
if (false) {
    /** @type {?} */
    BarecodeScannerLivestreamComponent.prototype.type;
    /** @type {?} */
    BarecodeScannerLivestreamComponent.prototype.valueChanges;
    /** @type {?} */
    BarecodeScannerLivestreamComponent.prototype.barecodeScanner;
    /** @type {?} */
    BarecodeScannerLivestreamComponent.prototype.started;
    /** @type {?} */
    BarecodeScannerLivestreamComponent.prototype.configQuagga;
}

//# sourceMappingURL=data:application/json;base64,