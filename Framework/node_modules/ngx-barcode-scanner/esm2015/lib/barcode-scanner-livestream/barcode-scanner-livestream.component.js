/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild, ViewEncapsulation } from '@angular/core';
import * as Quagga from 'quagga';
import { mapToReader } from './barcode-types';
import { DEFAULT_CONFIG } from './barcode-scanner-livestream.config';
export class BarecodeScannerLivestreamComponent {
    constructor() {
        // Outputs
        this.valueChanges = new EventEmitter();
        this.started = false;
        this.configQuagga = DEFAULT_CONFIG;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.stop();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.retart();
    }
    /**
     * @return {?}
     */
    _init() {
        return new Promise((resolve, reject) => {
            Quagga.onProcessed((result) => this.onProcessed(result));
            Quagga.onDetected((result) => this.onDetected(result));
            this.configQuagga.inputStream.target = this.barecodeScanner.nativeElement;
            if (this.type) {
                this.configQuagga.decoder.readers = mapToReader(this.type);
            }
            Quagga.init(this.configQuagga, (err) => {
                if (err) {
                    console.log(err);
                    return reject(err);
                }
                resolve();
            });
        });
    }
    /**
     * @return {?}
     */
    start() {
        if (!this.started) {
            return this._init().then(() => {
                Quagga.start();
                this.started = true;
                console.log('started');
            });
        }
        return Promise.resolve();
    }
    /**
     * @return {?}
     */
    stop() {
        if (this.started) {
            Quagga.stop();
            this.started = false;
            console.log('stopped');
        }
    }
    /**
     * @return {?}
     */
    retart() {
        if (this.started) {
            this.stop();
            this.start();
        }
    }
    /**
     * @return {?}
     */
    isStarted() {
        return this.started;
    }
    /**
     * @param {?} result
     * @return {?}
     */
    onProcessed(result) {
        /** @type {?} */
        let drawingCtx = Quagga.canvas.ctx.overlay;
        /** @type {?} */
        let drawingCanvas = Quagga.canvas.dom.overlay;
        if (result) {
            if (result.boxes) {
                drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute('width')), parseInt(drawingCanvas.getAttribute('height')));
                result.boxes.filter(function (box) {
                    return box !== result.box;
                }).forEach(function (box) {
                    Quagga.ImageDebug.drawPath(box, {
                        x: 0,
                        y: 1,
                    }, drawingCtx, {
                        color: 'green',
                        lineWidth: 2,
                    });
                });
            }
            if (result.box) {
                Quagga.ImageDebug.drawPath(result.box, {
                    x: 0,
                    y: 1,
                }, drawingCtx, {
                    color: '#00F',
                    lineWidth: 2,
                });
            }
            if (result.codeResult && result.codeResult.code) {
                Quagga.ImageDebug.drawPath(result.line, {
                    x: 'x',
                    y: 'y',
                }, drawingCtx, {
                    color: 'red',
                    lineWidth: 3,
                });
            }
        }
    }
    /**
     * @param {?} result
     * @return {?}
     */
    onDetected(result) {
        this.valueChanges.next(result);
    }
}
BarecodeScannerLivestreamComponent.decorators = [
    { type: Component, args: [{
                selector: 'barcode-scanner-livestream',
                template: "<div #BarecodeScanner class=\"scanner\" [hidden]=\"!isStarted()\">\n</div>",
                encapsulation: ViewEncapsulation.None,
                styles: [".scanner{position:relative}.scanner canvas,.scanner video{max-width:100%;width:100%}.scanner canvas.drawingBuffer{position:absolute;left:0;top:0}"]
            }] }
];
BarecodeScannerLivestreamComponent.propDecorators = {
    type: [{ type: Input }],
    valueChanges: [{ type: Output }],
    barecodeScanner: [{ type: ViewChild, args: ['BarecodeScanner',] }]
};
if (false) {
    /** @type {?} */
    BarecodeScannerLivestreamComponent.prototype.type;
    /** @type {?} */
    BarecodeScannerLivestreamComponent.prototype.valueChanges;
    /** @type {?} */
    BarecodeScannerLivestreamComponent.prototype.barecodeScanner;
    /** @type {?} */
    BarecodeScannerLivestreamComponent.prototype.started;
    /** @type {?} */
    BarecodeScannerLivestreamComponent.prototype.configQuagga;
}

//# sourceMappingURL=data:application/json;base64,